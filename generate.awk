#!/bin/awk -f
# ./generate.awk github.com/rpm-software-management/rpm/{lib/rpm{tag,ds,files}.h,rpmio/rpmpgp.h} > types.gen.go

# lib/rpmtag.h
/^typedef.*rpmTag_e/ { t = "tag" }
/^typedef.*rpmSigTag_e/ { t = "sigtag" }
/^typedef.*rpmTagType_e/ { t = "tagtype" }

# lib/rpmds.h
/^enum.*rpmsenseFlags_e/ { t = "sense" }

# lib/rpmfiles.h
/^enum.*rpmfileAttrs_e/ { t = "fileattr" }
/^enum.*rpmVerifyAttrs_e/ { t = "verifyattr" }

# rpmio/rpmpgp.h
/^typedef.*pgpHashAlgo_e/ { t = "hashalgo" }

/^}.*;$/ { t = "" }

/^#define[[:space:]]HEADER_.*/ && t == "" {
	hdr[$2]=$3
}

$1 ~ "^RPM.*_" || $1 ~ "^PGPHASHALGO_" || $1 == "#define" {
	if (!t)
		next
	if ($1 ~ "RETURN_TYPE$")
		next

	if ($1 == "#define") {
		k = $2
		v = $3
	} else {
		match($0, ".*=")
		if (RLENGTH == -1)
			next
		k = $1
		v = substr($0, RLENGTH+1)
	}

	sub(/=/, "", k)
	sub(/[,\t].*$/, "", v)

	if (k == "RPMTAG_NOT_FOUND")
		next

	switch (t) {
	case "tag":
		tag[v]=k
		break
	case "sigtag":
		sigtag[v]=k
		break
	case "tagtype":
		tagtype[v]=k
		break
	case "sense":
		sense[v]=k
		break
	case "fileattr":
		fileattr[v]=k
		break
	case "verifyattr":
		verifyattr[v]=k
		break
	case "hashalgo":
		hashalgo[v]=k
		break
	}
}

function gen(data) {
	print "const("
	n = asorti(data, sorted)
	for (i = 1; i <= n; i++) {
		k = sorted[i]
		print "\t", data[k], "=", k
	}
	print ")"
}

function gentype(name, type, data) {
	print "type", name, type
	print "const("
	n = asorti(data, sorted)
	for (i = 1; i <= n; i++) {
		k = sorted[i]
		print "\t", data[k], name, "=", k
	}
	print ")"
}

function genmap(data, type, name) {
	printf "var %s = map[%s]string{\n", name, type
	n = asorti(data, sorted)
	for (i = 1; i <= n; i++) {
		k = sorted[i]
		print "\t", data[k], ":", "\""data[k]"\","
	}
	print "}"
}

END {
	print "// Code generated by generate.awk. DO NOT EDIT.\n"
	print "package rpm"

	print "const ("
	for (h in hdr)
		print h, "=", hdr[h]
	print ")"

	print "//go:generate stringer -output types_string.gen.go -type=TagType"
	gentype("TagType", "uint32", tag)
	gentype("SigTagType", "= TagType", sigtag)
	genmap(sigtag, "TagType", "sigTagString")

	gen(tagtype)
	gen(sense)
	gen(fileattr)
	gen(verifyattr)
	gen(hashalgo)
}
